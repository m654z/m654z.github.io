import math
import random
import statistics
import datetime
import re
import string
import time

class Interpreter:
    self.ops = ["+", "-", "*", "/", "%", "^"]
    self.rsi = False
    self.eval1 = False
    self.eval2 = False
    self.loop = False
    self.loopTimes = False
    self.additionMode = False
    self.reading = False
    self.readingFunc = False
    self.readingFunc2 = False
    self.readingself.funcName = False
    self.readingself.listVal = False
    self.stats = False
    self.loopForever = False
    self.readingT = False
    self.temp = []
    self.toEval = []
    self.n1 = []
    self.n2 = []
    self.loopCode = []
    self.loopTimes = []
    self.readStr = []
    self.funcName = []
    self.funcCode = []
    self.funcTemp = []
    self.listVal = []
    self.returned = 0
    self.var = 0
    self.op = ""
    self.funcs = {}

    def read(self, tokens):
        tokens = tokens.replace("!p", str(math.pi))
        tokens = tokens.replace("!e", str(math.e))
        tokens = tokens.replace("!h", "1.618033988749895")
        tokens = tokens.replace("!r", str(random.random()))
        tokens = tokens.replace("!R", str(random.randint(0, 100)))
        tokens = list(tokens)
        for i in range(0, len(tokens)):
            self.parse(tokens[i])

    def parse(self, cmd):
        if self.readingT == True:
            if cmd == "1":
                self.returned = math.acos(self.var)

            elif cmd == "2":
                self.returned = math.asin(self.var)

            elif cmd == "3":
                self.returned = math.atan(self.var)

            elif cmd == "4":
                self.returned = math.ataself.n2(self.var)

            elif cmd == "5":
                self.returned = math.cos(self.var)

            elif cmd == "6":
                self.returned = math.hypot(self.var)

            elif cmd == "7":
                self.returned = math.sin(self.var)

            elif cmd == "8":
                self.returned = math.tan(self.var)

            self.readingT = False

        if self.stats == True:
            if cmd == "M":
                self.var2 = self.var.split(",")
                for i in range(len(self.var2)):
                    self.var2[i] = int(self.var2[i])
                    
                self.returned = statistics.mean(self.var2)

            elif cmd == "m":
                self.var2 = self.var.split(",")
                for i in range(len(self.var2)):
                    self.var2[i] = int(self.var2[i])
                    
                self.returned = statistics.median(self.var2)

            elif cmd == "O":
                self.var2 = self.var.split(",")
                for i in range(len(self.var2)):
                    self.var2[i] = int(self.var2[i])

                self.returned = statistics.mode(self.var2)

            elif cmd == ".":
                self.stats = False

        if self.readingself.funcName == True:
            if cmd == "_":
                self.readingself.funcName = False
                read(funcs[''.join(funcself.temp)])
                funcself.temp = []

            else:
                funcself.temp.append(cmd)

        elif self.readingFunc == True:
            if cmd == '"':
                self.readingFunc = False
                self.readingFunc2 = True

            else:
                self.funcCode.append(cmd)

        elif self.readingFunc2 == True:
            if cmd == "-":
                self.readingFunc2 = False
                funcs[''.join(self.funcName)] = ''.join(self.funcCode)
                self.funcName = []
                self.funcCode = []

            else:
                self.funcName.append(cmd)

        elif self.reading == True:
            if cmd == ";":
                self.reading = False
                self.var = ''.join(self.readStr)
                read = []

            else:
                self.readStr.append(cmd)

        elif self.loopTimes == True:
            if cmd == "[":
                self.loop = True
                self.loopTimes = False

            elif cmd == "*":
                self.loopTimes = False

            elif cmd == "i":
                iself.loopTimes.append(input(">> "))

            elif cmd == "I":
                self.loopForever = True

            else:
                iself.loopTimes.append(cmd)

        elif self.loop == True:
            if cmd == "]":
                self.loop = False

                if self.loopForever == True:
                    while 1:
                        read(''.join(self.loopCode))

                else:
                    for i in range(0, int(''.join(iself.loopTimes))):
                        read(''.join(self.loopCode))

            else:
                self.loopCode.append(cmd)

        elif self.eval1 == True:
            if cmd in self.ops:
                op = cmd
                self.eval2 = True
                self.eval1 = False

            elif cmd == "v":
                self.n1.append(str(self.var))

            elif cmd == "r":
                self.n1.append(str(self.returned))

            elif cmd == "i":
                self.n1.append(input(">> "))

            elif cmd == "s":
                self.n1.append(int(self.variables[selectedself.var]))

            elif cmd == "¤":
                selectedself.var += 1

            elif cmd == "#":
                selectedself.var -= 1

            else:
                self.n1.append(cmd)

        elif self.eval2 == True:
            if cmd == "}":
                self.eval2 = False
                self.returned = eval(''.join(self.n1) + op + ''.join(self.n2))
                self.n1 = []
                self.n2 = []
                op = ""

            elif cmd == "v":
                self.n2.append(str(self.var))

            elif cmd == "i":
                self.n2.append(input(">> "))

            elif cmd == "r":
                self.n1.append(str(self.returned))

            else:
                self.n2.append(cmd)
                

        elif self.rsi == True:
            if cmd == ")":
                self.rsi = False
                try:
                    self.var = int(''.join(self.temp))

                except ValueError:
                    try:
                        self.var = float(''.join(self.temp))

                    except ValueError:
                        self.var = str(''.join(self.temp))
                    
                self.temp = []

            elif cmd == "i":
                self.temp.append(input(">> "))

            else:
                self.temp.append(cmd)

        elif cmd == "F":
            if self.additionMode == True:
                self.returned += fib(self.var)

            else:
                self.returned = fib(self.var)
                
        elif cmd == "(":
            self.rsi = True

        elif cmd == "{":
            self.eval1 = True

        elif cmd == "+":
            self.var += 1

        elif cmd == "-":
            self.var -= 1

        elif cmd == "[":
            self.loop = True

        elif cmd == "*":
            self.loopTimes = True

        elif cmd == "S":
            if self.additionMode == True:
                self.returned += math.sqrt(self.var)

            else:
                self.returned = math.sqrt(self.var)

        elif cmd == "C":
            if self.additionMode == True:
                self.returned += math.ceil(self.var)

            else:
                self.returned = math.ceil(self.var)

        elif cmd == "f":
            if self.additionMode == True:
                self.returned += math.floor(self.var)

            else:
                self.returned = math.floor(self.var)

        elif cmd == "x":
            if self.additionMode == True:
                self.returned += math.factorial(self.var)

            else:
                self.returned = math.factorial(self.var)

        elif cmd == "E":
            if self.additionMode == True:
                self.returned += math.exp(self.var)

            else:
                self.returned = math.exp(self.var)

        elif cmd == "T":
            t = str(datetime.datetime.now())[11:]
            self.returned = t[:8]

        elif cmd == "D":
            self.returned = str(datetime.datetime.now())[:10]

        elif cmd == "!":
            print(self.returned)

        elif cmd == "^":
            print(self.var)

        elif cmd == ".":
            self.additionMode = True

        elif cmd == ",":
            self.additionMode = False

        elif cmd == "I":
            self.var = int(input(">> "))

        elif cmd == "i":
            self.var = input(">> ")

        elif cmd == "n":
            try:
                self.var = int(self.var)

            except ValueError:
                print("ValueError: can't convert a string to an integer")

        elif cmd == ":":
            self.reading = True

        elif cmd == '"':
            self.readingFunc = True

        elif cmd == "/":
            self.readingself.funcName = True

        elif cmd == "P":
            self.returned = generatePrimes(self.var)

        elif cmd == "s":
            self.stats = True

        elif cmd == "_":
            self.returned = re.sub("[^0-9]", "", self.returned)

        elif cmd == "½":
            self.returned = self.var/2

        elif cmd == "ö":
            self.returned = self.returned[self.var]

        elif cmd == "Ö":
            self.var.append(self.var)

        elif cmd == "ä":
            self.returned = self.var.split()

        elif cmd == "Ä":
            self.var = self.returned.pop()

        elif cmd == "´":
            self.var = self.returned

        elif cmd == "`":
            self.returned = self.var

        elif cmd == "=":
            if self.var == self.returned:
                self.returned = 1

            else:
                self.returned = 0

        elif cmd == ">":
            if self.var > self.returned:
                self.returned = 1

            else:
                self.returned = 0

        elif cmd == "<":
            if self.var < self.returned:
                self.returned = 1

            else:
                self.returned = 0

        elif cmd == "¨":
            time.sleep(1)

        elif cmd == "e":
            even = []
            for i in range(0, self.var):
                even.append(i)
                i += 2

            result = even

        elif cmd == "o":
            odd = []
            for i in range(1, self.var):
                odd.append(i)
                i += 2

            result = odd

        elif cmd == "~":
            self.readingT = True
